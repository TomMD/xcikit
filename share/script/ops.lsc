class Eq T {
    eq : |T T| -> Bool
    ne : |T T| -> Bool = |x y| { not (eq x y) }
}

class Ord T ( Eq T ) {
    lt : |T T| -> Bool
    gt : |T T| -> Bool
    le : |T T| -> Bool
    ge : |T T| -> Bool
}

instance Eq Int32 {
    eq = { __equal_32 }
    ne = { __not_equal_32 }
}

/*
instance Eq [T] ( Eq T ) {
    eq = |x y| {
        match x, y {
            [], [] -> true
            [], [...] -> false
            [...], [] -> false
            [x1, xrest...], [y1, yrest...] -> (eq x1 y1) && (eq xrest yrest)
        }
    }
}


f : |T T| -> T with (Ord T) = |x y| { x < y }
f = |x:T y:T| -> T lazy with (Ord T) { x < y }
*/

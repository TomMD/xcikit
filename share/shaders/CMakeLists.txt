# ------------ #
# Dependencies #
# ------------ #

# shader compiler - can use either glslc or glslangValidator
find_program(GLSLC glslc)
find_program(GLSLANG glslangValidator)

if (GLSLC)
    set(GLSL_C ${GLSLC})
elseif(GLSLANG)
    set(GLSL_C ${GLSLANG} -V)
else()
    message(STATUS "No GLSL compiler found, won't compile shaders...")
    return()
endif()

# ------------ #
# Functions    #
# ------------ #

function(add_shaders)
    set(options)
    set(one_value_args TARGET)
    set(multi_value_args SOURCES)
    cmake_parse_arguments(ARG "${options}" "${one_value_args}"
        "${multi_value_args}" ${ARGN} )
    if (NOT ARG_TARGET)
        message(SEND_ERROR "Required parameter missing: TARGET")
    endif()
    if (NOT ARG_SOURCES)
        message(SEND_ERROR "Required parameter missing: SOURCES")
    endif()

    set(outputs)
    set(assets)
    foreach(src ${ARG_SOURCES})
        add_custom_command(
            OUTPUT "${src}.spv"
            MAIN_DEPENDENCY "${src}"
            COMMAND ${GLSL_C} "${CMAKE_CURRENT_SOURCE_DIR}/${src}" -o "${src}.spv"
            COMMENT "Compiling shader ${src}"
            VERBATIM
        )
        list(APPEND outputs "${src}.spv")
        list(APPEND assets "shaders/${src}.spv")
        install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${src}.spv"
            DESTINATION share/xcikit/shaders)
    endforeach()

    add_custom_target(shaders ALL DEPENDS ${outputs})

    # remember list of asset files (relative to share output directory)
    define_property(TARGET
        PROPERTY ASSETS
        BRIEF_DOCS "asset files generated by the target"
        FULL_DOCS "the property contains list of full paths")
    set_property(TARGET shaders PROPERTY ASSETS ${assets})
endfunction()


# ------------ #
# Targets      #
# ------------ #

set(SHADER_SOURCES
    rectangle.vert
    rectangle.frag
    sprite.vert
    sprite.frag
    sprite_c.vert
    sprite_c.frag
    line.vert
    line.frag
    ellipse.vert
    ellipse.frag
    fps.vert
    fps.frag
    cursor.vert
    cursor.frag
    )

add_shaders(TARGET shaders SOURCES ${SHADER_SOURCES})

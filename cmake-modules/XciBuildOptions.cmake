option(BUILD_SHARED_LIBS "Build shared libs instead of static libs." OFF)
option(BUILD_LTO "Enable link-time, whole-program optimizations." OFF)
option(BUILD_WITH_CCACHE "Use ccache as compiler launcher, when available." ON)
option(BUILD_WITH_IWYU "Run iwyu (Include What You Use) on each compiled file, when available." OFF)
option(BUILD_PEDANTIC "Build with -Wpedantic -Werror." OFF)
option(BUILD_WITH_ASAN "Build with AddressSanitizer." OFF)
option(BUILD_WITH_UBSAN "Build with UndefinedBehaviorSanitizer." OFF)

if (BUILD_LTO)
    add_compile_options(-flto)
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -flto")
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto -fwhole-program-vtables")
    endif()
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        # LTO requires GCC version of binutils
        find_program(GCC_AR NAMES gcc-ar)
        find_program(GCC_NM NAMES gcc-nm)
        find_program(GCC_RANLIB NAMES gcc-ranlib)
        message(STATUS "GCC ar: ${GCC_AR}")
        message(STATUS "GCC nm: ${GCC_NM}")
        message(STATUS "GCC ranlib: ${GCC_RANLIB}")
        set(CMAKE_AR "${GCC_AR}")
        set(CMAKE_NM "${GCC_NM}")
        set(CMAKE_RANLIB "${GCC_RANLIB}")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fwhole-program")
    endif()
endif()

if (BUILD_WITH_CCACHE)
    find_program(CCACHE_EXECUTABLE ccache)
    message(STATUS "Found ccache: ${CCACHE_EXECUTABLE}")
    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_EXECUTABLE})
    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_EXECUTABLE})
endif()

if (BUILD_WITH_IWYU)
    find_program(IWYU_EXECUTABLE iwyu)
    message(STATUS "Found iwyu: ${IWYU_EXECUTABLE}")
    set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE ${IWYU_EXECUTABLE})
endif()

if (BUILD_PEDANTIC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic -Werror")
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-vla -Wno-gnu-zero-variadic-macro-arguments")
    endif()
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-vla-extension -Wno-gnu-zero-variadic-macro-arguments")
    endif()
endif()

if (BUILD_WITH_ASAN)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
endif ()

if (BUILD_WITH_UBSAN)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
endif ()

# Strip dead-code
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-dead_strip")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-dead_strip")
endif ()

# Strip dead-code
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-dead_strip")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-dead_strip")
endif ()

# To get useful debuginfo, we need frame pointer
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -fno-omit-frame-pointer")
